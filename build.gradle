buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'org.jooq:jooq-codegen:3.7.2'
        classpath 'mysql:mysql-connector-java:5.1.37'
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.3.1.RELEASE'
    }
}
group 'home'
version '1.0-SNAPSHOT'
apply plugin: 'java'
sourceSets {
    main {
        java {
            srcDir 'src/generated/java'
        }
    }
}
apply plugin: 'application'
apply plugin: 'spring-boot'

sourceCompatibility = '1.8'
mainClassName='home.microservice.nonblocking.Starter'
repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url "http://repo.spring.io/libs-snapshot" }
}
configurations {
    provided
    capsule
    quasar
}
sourceSets {
    main {
        compileClasspath += configurations.provided
        runtimeClasspath += configurations.provided
    }
    test {
        compileClasspath += configurations.provided
        runtimeClasspath += configurations.provided
    }
}

dependencies {
    compile "org.springframework.boot:spring-boot:1.3.1.RELEASE"
    compile "org.springframework:spring-context:4.2.4.RELEASE"
    //database
    compile 'org.apache.tomcat:tomcat-jdbc:8.0.28'
    compile 'org.jooq:jooq:3.7.2'
    compile "mysql:mysql-connector-java:5.1.36"
    //rest
    compile 'com.github.advantageous:qbit-core:0.9.2-RC14'
    compile ("com.github.advantageous:qbit-vertx:0.9.2-RC14"){
        exclude group: "io.vertx"
    }
    //internal parallelism
    compile "org.projectlombok:lombok:1.16.4"
    compile 'log4j:log4j:1.2.16'
    compile 'org.slf4j:slf4j-api:1.7.13'
    compile 'org.slf4j:jcl-over-slf4j:1.7.13'
    compile 'org.slf4j:jul-to-slf4j:1.7.13'
    compile 'org.slf4j:log4j-over-slf4j:1.7.13'
    compile 'org.slf4j:slf4j-simple:1.7.13'
    compile "io.vertx:vertx-core:3.1.0"
    compile "io.vertx:vertx-web:3.1.0"
    compile "io.vertx:vertx-sync:3.1.0"
    capsule "co.paralleluniverse:capsule:1.0.1"
//    compile "co.paralleluniverse:quasar-core:0.7.3:jdk8"
    compile "co.paralleluniverse:comsat-jooq:0.5.0"
    quasar "co.paralleluniverse:quasar-core:0.7.3:jdk8"

    //cloud
    compile 'org.springframework.cloud:spring-cloud-core:1.2.1.RELEASE'
    compile 'org.springframework.cloud:spring-cloud-cloudfoundry-connector:1.2.1.RELEASE'
//    compile 'org.springframework.cloud:spring-cloud-localconfig-connector:1.2.1.RELEASE'
    compile 'org.springframework.cloud:spring-cloud-spring-service-connector:1.2.1.RELEASE'

    //test
    testCompile 'junit:junit:4.11'
}
//enabling quasar fibers for parallelism on jdbc level
run {
    jvmArgs //"-javaagent:${configurations.quasar.iterator().next()}  " +
//            "-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000 " +
            "-Xms2G -Xmx2G -server " +
            "-XX:+UseNUMA " +
            "-XX:+UseParallelGC " +
            "-XX:+AggressiveOpts " +
            "-Dvertx.disableWebsockets=true " +
            "-Dvertx.flashPolicyHandler=false " +
            "-Dvertx.threadChecks=false " +
            "-Dvertx.disableContextTimings=true " +
            "-Dvertx.disableTCCL=true"
}
//building fatjar with parameters.
task capsule(type: Jar, dependsOn: classes) {
    archiveName = "microservice-template-capsule.jar"
    from jar // embed our application jar
    from { configurations.runtime } // embed dependencies

    from(configurations.capsule.collect { zipTree(it) }) { include 'Capsule.class' } // we just need the single Capsule class

    manifest {
        attributes(
                'Premain-Class'  :   'Capsule',
                'Main-Class'  :   'Capsule',
                'Application-Class'   : mainClassName,
                'Extract-Capsule' : 'false', // no need to extract the capsule
                'Min-Java-Version' : '1.8.0',
                'JVM-Args' : run.jvmArgs.join(' '),
                'System-Properties' : run.systemProperties.collect { k,v -> "$k=$v" }.join(' '),
                'Dependencies': getDependencies(configurations.runtime).join(' ')
        )
    }
}

// converts Gradle dependencies to Capsule dependencies
def getDependencies(config) {
    return config.getAllDependencies().collect {
        def res = it.group + ':' + it.name + ':' + it.version +
                (!it.artifacts.isEmpty() ? ':' + it.artifacts.iterator().next().classifier : '')
        if(!it.excludeRules.isEmpty()) {
            res += "(" + it.excludeRules.collect { it.group + ':' + it.module }.join(',') + ")"
        }
        return res
    }
}
//database to dto generation for jooq tool
def writer = new StringWriter()
def xml = new groovy.xml.MarkupBuilder(writer)
        .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.7.0.xsd') {
    jdbc() {
        driver('com.mysql.jdbc.Driver')
        url('jdbc:mysql://localhost:3306/vaadin')
        user('root')
        password('root')

    }
    generator() {
        database() {
            inputSchema('template')
            outputSchemaToDefault(true)
        }

        generate([:]) {
            pojos true
            daos true
        }
        target() {
            packageName('home.microservice.nonblocking.contact.dao')
            directory('src/generated/java')
        }
    }
}

org.jooq.util.GenerationTool.generate(
        javax.xml.bind.JAXB.unmarshal(new StringReader(writer.toString()), org.jooq.util.jaxb.Configuration.class)
)